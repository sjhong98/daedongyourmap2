"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/[location]/page",{

/***/ "(app-pages-browser)/./app/[location]/postView/uploadComment.tsx":
/*!***************************************************!*\
  !*** ./app/[location]/postView/uploadComment.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UploadComment: function() { return /* binding */ UploadComment; }\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var _firestore_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/firestore/config */ \"(app-pages-browser)/./firestore/config.tsx\");\n/* __next_internal_client_entry_do_not_use__ UploadComment auto */ \n\nasync function UploadComment(post, idToken, comment, comments, setComments) {\n    (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(_firestore_config__WEBPACK_IMPORTED_MODULE_1__.firebaseConfig);\n    const email = localStorage.getItem(\"ddym-email\");\n    let temp = [];\n    if (comments.length !== 0) {\n        temp = [\n            ...comments\n        ];\n    }\n    temp.push({\n        mapValue: {\n            fields: {\n                user: {\n                    stringValue: email\n                },\n                comment: {\n                    stringValue: comment\n                }\n            }\n        }\n    });\n    const res = fetch(\"https://firestore.googleapis.com/v1/\".concat(post.name, \"?updateMask.fieldPaths=comments\"), {\n        method: \"PATCH\",\n        headers: {\n            \"Authorization\": \"Bearer \".concat(idToken)\n        },\n        body: JSON.stringify({\n            fields: {\n                comments: {\n                    arrayValue: {\n                        values: temp\n                    }\n                }\n            }\n        })\n    });\n    (await res).json().then(()=>console.log(\"댓글 추가 성공\")).catch((err)=>console.log(err));\n    setComments(temp);\n}\n_c = UploadComment;\nvar _c;\n$RefreshReg$(_c, \"UploadComment\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9bbG9jYXRpb25dL3Bvc3RWaWV3L3VwbG9hZENvbW1lbnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7OzttRUFHNkM7QUFDTztBQUc3QyxlQUFlRSxjQUFjQyxJQUFhLEVBQUVDLE9BQWMsRUFBRUMsT0FBYyxFQUFFQyxRQUFZLEVBQUVDLFdBQXlCO0lBQ3RIUCwyREFBYUEsQ0FBQ0MsNkRBQWNBO0lBQzVCLE1BQU1PLFFBQVFDLGFBQWFDLE9BQU8sQ0FBQztJQUNuQyxJQUFJQyxPQUFhLEVBQUU7SUFDbkIsSUFBR0wsU0FBU00sTUFBTSxLQUFLLEdBQUc7UUFDdEJELE9BQU87ZUFBSUw7U0FBUztJQUN4QjtJQUNBSyxLQUFLRSxJQUFJLENBQ0w7UUFBRUMsVUFDRTtZQUFFQyxRQUNFO2dCQUNJQyxNQUFNO29CQUFFQyxhQUFjVDtnQkFBTTtnQkFDNUJILFNBQVM7b0JBQUVZLGFBQWNaO2dCQUFRO1lBQ3JDO1FBQ0o7SUFDSjtJQUVKLE1BQU1hLE1BQU1DLE1BQU0sdUNBQWlELE9BQVZoQixLQUFLaUIsSUFBSSxFQUFDLG9DQUFrQztRQUNqR0MsUUFBUTtRQUNSQyxTQUFTO1lBQ0wsaUJBQWlCLFVBQWtCLE9BQVJsQjtRQUMvQjtRQUNBbUIsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO1lBQ2pCVixRQUFRO2dCQUNKVCxVQUFVO29CQUNOb0IsWUFBWTt3QkFDUkMsUUFBUWhCO29CQUNaO2dCQUNKO1lBQ0o7UUFDSjtJQUNKO0lBQ0MsT0FBTU8sR0FBRSxFQUFHVSxJQUFJLEdBQ2ZDLElBQUksQ0FBQyxJQUFNQyxRQUFRQyxHQUFHLENBQUMsYUFDdkJDLEtBQUssQ0FBQyxDQUFDQyxNQUFRSCxRQUFRQyxHQUFHLENBQUNFO0lBQzVCMUIsWUFBWUk7QUFDaEI7S0FwQ3NCVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvW2xvY2F0aW9uXS9wb3N0Vmlldy91cGxvYWRDb21tZW50LnRzeD8yZmIzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tIFwiZmlyZWJhc2UvYXBwXCI7XG5pbXBvcnQgeyBmaXJlYmFzZUNvbmZpZyB9IGZyb20gXCJAL2ZpcmVzdG9yZS9jb25maWdcIjtcbmltcG9ydCB7IFBvc3RUeXBlIH0gZnJvbSBcIkAvYXBwL3JlY29pbENvbnRleHRQcm92aWRlclwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gVXBsb2FkQ29tbWVudChwb3N0OlBvc3RUeXBlLCBpZFRva2VuOnN0cmluZywgY29tbWVudDpzdHJpbmcsIGNvbW1lbnRzOmFueSwgc2V0Q29tbWVudHM6RGlzcGF0Y2g8YW55Pikge1xuICAgIGluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xuICAgIGNvbnN0IGVtYWlsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RkeW0tZW1haWwnKTtcbiAgICBsZXQgdGVtcDphbnlbXSA9IFtdO1xuICAgIGlmKGNvbW1lbnRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0ZW1wID0gWy4uLmNvbW1lbnRzXTtcbiAgICB9XG4gICAgdGVtcC5wdXNoKFxuICAgICAgICB7IG1hcFZhbHVlIDogXG4gICAgICAgICAgICB7IGZpZWxkcyA6IFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogeyBzdHJpbmdWYWx1ZSA6IGVtYWlsIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQ6IHsgc3RyaW5nVmFsdWUgOiBjb21tZW50IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApXG4gICAgY29uc3QgcmVzID0gZmV0Y2goYGh0dHBzOi8vZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tL3YxLyR7cG9zdC5uYW1lfT91cGRhdGVNYXNrLmZpZWxkUGF0aHM9Y29tbWVudHNgLCB7XG4gICAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IGBCZWFyZXIgJHtpZFRva2VufWBcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgY29tbWVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB0ZW1wIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pO1xuICAgIChhd2FpdCByZXMpLmpzb24oKVxuICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKFwi64yT6riAIOy2lOqwgCDshLHqs7VcIikpXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xuICAgIHNldENvbW1lbnRzKHRlbXApO1xufSJdLCJuYW1lcyI6WyJpbml0aWFsaXplQXBwIiwiZmlyZWJhc2VDb25maWciLCJVcGxvYWRDb21tZW50IiwicG9zdCIsImlkVG9rZW4iLCJjb21tZW50IiwiY29tbWVudHMiLCJzZXRDb21tZW50cyIsImVtYWlsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInRlbXAiLCJsZW5ndGgiLCJwdXNoIiwibWFwVmFsdWUiLCJmaWVsZHMiLCJ1c2VyIiwic3RyaW5nVmFsdWUiLCJyZXMiLCJmZXRjaCIsIm5hbWUiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhcnJheVZhbHVlIiwidmFsdWVzIiwianNvbiIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwiY2F0Y2giLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/[location]/postView/uploadComment.tsx\n"));

/***/ })

});